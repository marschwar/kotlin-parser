buildscript {
    ext {
        antlr_version = '4.7.2'
        spek_version = "2.0+"
    }
}

plugins {
    id 'org.jetbrains.kotlin.jvm' version '1.3.41'
    id 'java'
    id 'antlr'
    id "com.github.johnrengelman.shadow" version "5.1.0"
    id 'com.palantir.graal' version '0.4.0'
}

repositories {
    mavenCentral()
    jcenter()
}

dependencies {
    implementation 'org.jetbrains.kotlin:kotlin-stdlib-jdk8'

    antlr "org.antlr:antlr4:$antlr_version"

    testImplementation "org.spekframework.spek2:spek-dsl-jvm:$spek_version"
    testRuntimeOnly "org.spekframework.spek2:spek-runner-junit5:$spek_version"

    // spek requires kotlin-reflect, can be omitted if already in the classpath
    testRuntimeOnly "org.jetbrains.kotlin:kotlin-reflect"

    testImplementation 'org.assertj:assertj-core:3.12+'
}

sourceSets {
    main {
        java.srcDirs += 'build/gensrc/antlr/main/java'
    }
}

test {
    useJUnitPlatform {
        includeEngines 'spek2'
    }
}

generateGrammarSource {
    outputDirectory = file('build/gensrc/antlr/main/java/com/github/marschwar/kotlinParser/parser')
    arguments += [
            '-package', 'com.github.marschwar.kotlinParser.parser',
            '-long-messages'
    ]
}

jar {
    manifest {
        attributes 'Main-Class': 'com.github.marschwar.kotlinParser.MainKt'
    }
}

build.dependsOn(shadowJar, nativeImage)
compileKotlin.dependsOn(generateGrammarSource)

shadowJar {
    dependencies {
        exclude(dependency("org.antlr:antlr4:.*"))
        exclude(dependency("org.antlr:antlr-runtime:.*"))
        exclude(dependency("org.antlr:ST4:.*"))
        exclude(dependency("com.ibm.icu:icu4j:.*"))
        exclude(dependency("org.abego.treelayout:.*"))
    }
}

graal {
    mainClass 'com.github.marschwar.kotlinParser.MainKt'
    outputName 'kotlin-parser'
    option '--verbose'
    option '--no-server'
    option '-H:+ReportExceptionStackTraces'
}